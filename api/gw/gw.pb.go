// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gw.proto

/*
Package gw is a generated protocol buffer package.

It is generated from these files:
	gw.proto

It has these top-level messages:
	Channel
	GetConfigurationRequest
	GetConfigurationResponse
*/
package gw

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Modulation int32

const (
	// LoRa
	Modulation_LORA Modulation = 0
	// FSK
	Modulation_FSK Modulation = 1
)

var Modulation_name = map[int32]string{
	0: "LORA",
	1: "FSK",
}
var Modulation_value = map[string]int32{
	"LORA": 0,
	"FSK":  1,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}
func (Modulation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Channel struct {
	// Modulation of the channel.
	Modulation Modulation `protobuf:"varint,1,opt,name=modulation,enum=gw.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency int32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Bandwidth.
	Bandwidth int32 `protobuf:"varint,3,opt,name=bandwidth" json:"bandwidth,omitempty"`
	// Data-rate (FSK modulation only).
	DataRate int32 `protobuf:"varint,4,opt,name=dataRate" json:"dataRate,omitempty"`
	// Spread-factors (LoRa modulation only).
	SpreadFactors []int32 `protobuf:"varint,5,rep,packed,name=spreadFactors" json:"spreadFactors,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (m *Channel) String() string            { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Channel) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_LORA
}

func (m *Channel) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Channel) GetBandwidth() int32 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func (m *Channel) GetDataRate() int32 {
	if m != nil {
		return m.DataRate
	}
	return 0
}

func (m *Channel) GetSpreadFactors() []int32 {
	if m != nil {
		return m.SpreadFactors
	}
	return nil
}

type GetConfigurationRequest struct {
	// MAC address of the gateway.
	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (m *GetConfigurationRequest) Reset()                    { *m = GetConfigurationRequest{} }
func (m *GetConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigurationRequest) ProtoMessage()               {}
func (*GetConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetConfigurationRequest) GetMac() []byte {
	if m != nil {
		return m.Mac
	}
	return nil
}

type GetConfigurationResponse struct {
	// Channels configured on the gateway.
	Channels []*Channel `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
}

func (m *GetConfigurationResponse) Reset()                    { *m = GetConfigurationResponse{} }
func (m *GetConfigurationResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigurationResponse) ProtoMessage()               {}
func (*GetConfigurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetConfigurationResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func init() {
	proto.RegisterType((*Channel)(nil), "gw.Channel")
	proto.RegisterType((*GetConfigurationRequest)(nil), "gw.GetConfigurationRequest")
	proto.RegisterType((*GetConfigurationResponse)(nil), "gw.GetConfigurationResponse")
	proto.RegisterEnum("gw.Modulation", Modulation_name, Modulation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Gateway service

type GatewayClient interface {
	// GetConfiguration returns the gateway configuration for the given MAC.
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
}

type gatewayClient struct {
	cc *grpc.ClientConn
}

func NewGatewayClient(cc *grpc.ClientConn) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := grpc.Invoke(ctx, "/gw.Gateway/GetConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Gateway service

type GatewayServer interface {
	// GetConfiguration returns the gateway configuration for the given MAC.
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
}

func RegisterGatewayServer(s *grpc.Server, srv GatewayServer) {
	s.RegisterService(&_Gateway_serviceDesc, srv)
}

func _Gateway_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.Gateway/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfiguration",
			Handler:    _Gateway_GetConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gw.proto",
}

func init() { proto.RegisterFile("gw.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x97, 0x75, 0xb3, 0xf5, 0x4e, 0x47, 0xc9, 0x8b, 0x61, 0x0e, 0x2c, 0x45, 0xb0, 0x28,
	0xf4, 0xa1, 0x7e, 0x02, 0x29, 0x6c, 0x0f, 0x2a, 0x83, 0xf8, 0xe6, 0xdb, 0x5d, 0x9b, 0x75, 0x85,
	0x2d, 0xa9, 0x4d, 0x4a, 0xd9, 0x27, 0xf3, 0xeb, 0x49, 0x5b, 0xe9, 0xfc, 0xfb, 0x96, 0x9c, 0xdf,
	0x25, 0xf7, 0x9c, 0x13, 0x70, 0xb2, 0x3a, 0x2c, 0x4a, 0x65, 0x14, 0x1d, 0x66, 0xb5, 0xff, 0x4e,
	0xc0, 0x8e, 0xb7, 0x28, 0xa5, 0xd8, 0xd1, 0x10, 0x60, 0xaf, 0xd2, 0x6a, 0x87, 0x26, 0x57, 0x92,
	0x11, 0x8f, 0x04, 0xd3, 0x68, 0x1a, 0x66, 0x75, 0xf8, 0xdc, 0xab, 0xfc, 0xcb, 0x04, 0x9d, 0xc3,
	0xe9, 0xa6, 0x14, 0x6f, 0x95, 0x90, 0xc9, 0x81, 0x0d, 0x3d, 0x12, 0x8c, 0xf9, 0x51, 0x68, 0xe8,
	0x1a, 0x65, 0x5a, 0xe7, 0xa9, 0xd9, 0x32, 0xab, 0xa3, 0xbd, 0x40, 0x67, 0xe0, 0xa4, 0x68, 0x90,
	0xa3, 0x11, 0x6c, 0xd4, 0xc2, 0xfe, 0x4e, 0xaf, 0xe1, 0x5c, 0x17, 0xa5, 0xc0, 0x74, 0x81, 0x89,
	0x51, 0xa5, 0x66, 0x63, 0xcf, 0x0a, 0xc6, 0xfc, 0xbb, 0xe8, 0xdf, 0xc1, 0xc5, 0x52, 0x98, 0x58,
	0xc9, 0x4d, 0x9e, 0x55, 0x65, 0xe7, 0xae, 0xd9, 0xad, 0x0d, 0x75, 0xc1, 0xda, 0x63, 0xd2, 0x26,
	0x38, 0xe3, 0xcd, 0xd1, 0x8f, 0x81, 0xfd, 0x1e, 0xd6, 0x85, 0x92, 0x5a, 0xd0, 0x1b, 0x70, 0x92,
	0xae, 0x01, 0xcd, 0x88, 0x67, 0x05, 0x93, 0x68, 0xd2, 0x84, 0xfe, 0x6c, 0x85, 0xf7, 0xf0, 0xf6,
	0x0a, 0xe0, 0xd8, 0x04, 0x75, 0x60, 0xf4, 0xb4, 0xe2, 0x0f, 0xee, 0x80, 0xda, 0x60, 0x2d, 0x5e,
	0x1e, 0x5d, 0x12, 0xbd, 0x82, 0xbd, 0x44, 0x23, 0x6a, 0x3c, 0xd0, 0x15, 0xb8, 0x3f, 0x17, 0xd2,
	0xcb, 0xe6, 0xd9, 0x7f, 0x3c, 0xcf, 0xe6, 0x7f, 0xc3, 0xce, 0xa3, 0x3f, 0x58, 0x9f, 0xb4, 0x7f,
	0x76, 0xff, 0x11, 0x00, 0x00, 0xff, 0xff, 0x95, 0x69, 0xd3, 0x71, 0xbf, 0x01, 0x00, 0x00,
}
